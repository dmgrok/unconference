generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "linux-musl", "debian-openssl-1.1.x"]
  output        = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionTier {
  FREE
  COMMUNITY
  ORGANIZER
  UNLIMITED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

enum GlobalRole {
  SUPER_ADMIN
  USER
}

enum EventStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum EventPaymentType {
  SUBSCRIPTION
  PAY_PER_EVENT
  FREE
}

enum EventPaymentStatus {
  FREE
  PENDING
  PAID
  FAILED
}

enum EventRole {
  ORGANIZER
  MODERATOR
  PARTICIPANT
  GUEST
}

enum MembershipStatus {
  ACTIVE
  SUSPENDED
  PENDING_APPROVAL
}

enum VotePreference {
  FIRST_CHOICE
  SECOND_CHOICE
}

enum RoundStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum CollaborationStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
}

enum ResourceType {
  LINK
  DOCUMENT
  TOOL
  ARTICLE
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum ProjectStatus {
  IDEATION
  ACTIVE
  COMPLETED
  SEEKING_COLLABORATORS
}

enum AchievementType {
  CONNECTION
  COLLABORATION
  KNOWLEDGE
  COMMUNITY
}

enum IntroductionStatus {
  PENDING
  ACCEPTED
  DECLINED
  COMPLETED
}

enum MatchType {
  COMPLEMENT
  SHARED_INTEREST
  MENTOR_MENTEE
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  name                 String?
  nickname             String?
  passwordHash         String?
  avatar               String?
  isEmailVerified      Boolean               @default(false)
  emailVerifyPin       String?
  emailVerifyExpires   DateTime?
  githubId             String?               @unique
  googleId             String?               @unique
  linkedinId           String?               @unique
  twitterId            String?               @unique
  globalRole           GlobalRole            @default(USER)
  isActive             Boolean               @default(true)
  isGuest              Boolean               @default(false)
  bio                  String?
  skills               String?
  interests            String?
  lookingFor           String?
  linkedinUrl          String?
  twitterHandle        String?
  websiteUrl           String?
  allowContactSharing  Boolean               @default(false)
  emailPreferences     String?               @default("{\"eventSummaries\":true,\"collaborationReminders\":true,\"networkingFollowUp\":true,\"weeklyDigest\":true,\"eventInvitations\":true}")
  subscriptionTier     SubscriptionTier      @default(FREE)
  subscriptionId       String?               @unique
  customerId           String?               @unique
  subscriptionStatus   SubscriptionStatus    @default(ACTIVE)
  subscriptionStart    DateTime?
  subscriptionEnd      DateTime?
  participantLimit     Int                   @default(50)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  lastLoginAt          DateTime?
  connectionsB         EventConnection[]     @relation("ConnectionParticipantB")
  connectionsA         EventConnection[]     @relation("ConnectionParticipantA")
  eventMemberships     EventMembership[]
  ownedEvents          Event[]               @relation("EventOwner")
  introductionTargets  IntroductionRequest[] @relation("IntroductionTarget")
  introductionRequests IntroductionRequest[] @relation("IntroductionRequester")
  roundParticipations  RoundParticipation[]
  skillMatchesB        SkillMatch[]          @relation("SkillMatchPersonB")
  skillMatchesA        SkillMatch[]          @relation("SkillMatchPersonA")
  createdTopics        Topic[]
  achievements         UserAchievement[]
  votes                Vote[]
  connections          Connection[]          @relation("UserConnections")
  connectedTo          Connection[]          @relation("ConnectedUserConnections")
  newAchievements      Achievement[]
  networkingInsights   NetworkingInsight[]

  @@map("users")
}

model Event {
  id                   String             @id @default(cuid())
  title                String
  description          String?
  code                 String             @unique
  maxParticipants      Int                @default(50)
  allowGuestAccess     Boolean            @default(true)
  requireApproval      Boolean            @default(false)
  status               EventStatus        @default(DRAFT)
  statusReason         String?
  paymentType          EventPaymentType   @default(SUBSCRIPTION)
  paymentStatus        EventPaymentStatus @default(FREE)
  stripePaymentId      String?            @unique
  paidAmount           Int                @default(0)
  paidAt               DateTime?
  maxVotesPerTopic     Int                @default(12)
  maxTopicsPerRound    Int                @default(10)
  defaultRoundDuration Int                @default(20)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  startsAt             DateTime?
  endsAt               DateTime?
  ownerId              String
  memberships          EventMembership[]
  owner                User               @relation("EventOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  rooms                Room[]
  rounds               Round[]
  topics               Topic[]

  @@map("events")
}

model EventMembership {
  id       String           @id @default(cuid())
  userId   String
  eventId  String
  role     EventRole        @default(PARTICIPANT)
  status   MembershipStatus @default(ACTIVE)
  joinedAt DateTime         @default(now())
  event    Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_memberships")
}

model Topic {
  id              String       @id @default(cuid())
  title           String
  description     String
  isActive        Boolean      @default(true)
  isFrozen        Boolean      @default(false)
  totalVotes      Int          @default(0)
  preferenceScore Int          @default(0)
  badges          Int          @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  eventId         String
  createdById     String
  roundTopics     RoundTopic[]
  createdBy       User         @relation(fields: [createdById], references: [id])
  event           Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  votes           Vote[]

  @@map("topics")
}

model Vote {
  id         String         @id @default(cuid())
  userId     String
  topicId    String
  preference VotePreference
  createdAt  DateTime       @default(now())
  topic      Topic          @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@map("votes")
}

model Room {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  capacity            Int                  @default(20)
  location            String?
  isActive            Boolean              @default(true)
  eventId             String
  createdAt           DateTime             @default(now())
  event               Event                @relation(fields: [eventId], references: [id], onDelete: Cascade)
  roundParticipations RoundParticipation[]

  @@map("rooms")
}

model Round {
  id           String               @id @default(cuid())
  roundNumber  Int
  duration     Int
  status       RoundStatus          @default(PLANNED)
  startTime    DateTime?
  endTime      DateTime?
  createdAt    DateTime             @default(now())
  eventId      String
  participants RoundParticipation[]
  roundTopics  RoundTopic[]
  event        Event                @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, roundNumber])
  @@map("rounds")
}

model RoundTopic {
  id         String @id @default(cuid())
  roundId    String
  topicId    String
  finalScore Int    @default(0)
  topic      Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  round      Round  @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@unique([roundId, topicId])
  @@map("round_topics")
}

model RoundParticipation {
  id          String    @id @default(cuid())
  roundId     String
  userId      String
  roomId      String?
  assignedAt  DateTime  @default(now())
  checkedIn   Boolean   @default(false)
  checkedInAt DateTime?
  room        Room?     @relation(fields: [roomId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  round       Round     @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@unique([roundId, userId])
  @@map("round_participations")
}

model Subscription {
  id                   String             @id @default(cuid())
  stripeSubscriptionId String             @unique
  stripeCustomerId     String
  stripePriceId        String
  tier                 SubscriptionTier
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@map("subscriptions")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  eventId   String?
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

// Phase 1: Connection & Networking Models
model Connection {
  id                String           @id @default(cuid())
  userId            String
  connectedUserId   String
  eventId           String
  qualityScore      Int              @default(50) // 0-100 scale
  connectionStrength String          @default("WEAK") // WEAK, MEDIUM, STRONG
  conversationTopics String?         // JSON string of topics discussed
  sharedInterests   String?         // JSON string of common interests discovered
  mutualGoals       String?         // JSON string of shared professional goals
  followUpStatus    String          @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED
  lastContactDate   DateTime?
  nextFollowUpDate  DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  user              User            @relation("UserConnections", fields: [userId], references: [id], onDelete: Cascade)
  connectedUser     User            @relation("ConnectedUserConnections", fields: [connectedUserId], references: [id], onDelete: Cascade)
  notes             ConnectionNote[]
  followUpTasks     FollowUpTask[]
  collaborations    ConnectionCollaboration[]

  @@unique([userId, connectedUserId, eventId])
  @@map("connections")
}

model ConnectionNote {
  id           String     @id @default(cuid())
  connectionId String
  content      String
  isPrivate    Boolean    @default(true)
  createdAt    DateTime   @default(now())

  connection   Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)

  @@map("connection_notes")
}

model FollowUpTask {
  id           String     @id @default(cuid())
  connectionId String
  task         String
  description  String?
  dueDate      DateTime
  status       String     @default("PENDING") // PENDING, COMPLETED, SKIPPED
  completedAt  DateTime?
  createdAt    DateTime   @default(now())

  connection   Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)

  @@map("follow_up_tasks")
}

model ConnectionCollaboration {
  id           String     @id @default(cuid())
  connectionId String
  projectName  String
  description  String
  status       String     @default("PROPOSED") // PROPOSED, ACTIVE, COMPLETED
  outcome      String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  connection   Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)

  @@map("connection_collaborations")
}

// Achievement System Models
model Achievement {
  id              String           @id @default(cuid())
  userId          String
  eventId         String
  type            String           // SUPER_CONNECTOR, FOLLOW_UP_CHAMPION, etc.
  title           String
  description     String
  iconEmoji       String?
  points          Int              @default(10)
  unlockedAt      DateTime         @default(now())
  metadata        String?          // JSON string for additional data

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

model NetworkingInsight {
  id              String     @id @default(cuid())
  userId          String
  eventId         String
  insightType     String     // TOP_CONNECTOR, RISING_INFLUENCER, etc.
  title           String
  description     String
  value           String?    // Metric value if applicable
  createdAt       DateTime   @default(now())

  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("networking_insights")
}

model SystemSetting {
  id        String   @id
  value     String
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model EventConnection {
  id                 String    @id @default(cuid())
  eventId            String
  participantAId     String
  participantBId     String
  sharedTopics       String?
  collaboratedOn     String?
  contactExchanged   Boolean   @default(false)
  connectionStrength Int       @default(1)
  meetingNotes       String?
  followUpPlanned    Boolean   @default(false)
  followUpDate       DateTime?
  createdAt          DateTime  @default(now())
  participantB       User      @relation("ConnectionParticipantB", fields: [participantBId], references: [id])
  participantA       User      @relation("ConnectionParticipantA", fields: [participantAId], references: [id])

  @@unique([eventId, participantAId, participantBId])
  @@map("event_connections")
}

model CollaborationSpace {
  id           String                  @id @default(cuid())
  eventId      String
  topicId      String?
  roomId       String?
  name         String
  description  String?
  contributors String?
  sharedNotes  String                  @default("")
  status       CollaborationStatus     @default(ACTIVE)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  actionItems  ActionItem[]
  resources    CollaborationResource[]

  @@map("collaboration_spaces")
}

model CollaborationResource {
  id              String             @id @default(cuid())
  collaborationId String
  url             String
  title           String
  description     String?
  resourceType    ResourceType       @default(LINK)
  addedBy         String
  votes           Int                @default(0)
  addedAt         DateTime           @default(now())
  collaboration   CollaborationSpace @relation(fields: [collaborationId], references: [id], onDelete: Cascade)

  @@map("collaboration_resources")
}

model ActionItem {
  id              String             @id @default(cuid())
  collaborationId String
  task            String
  description     String?
  assignedTo      String
  dueDate         DateTime?
  status          ActionStatus       @default(PENDING)
  priority        Priority           @default(MEDIUM)
  createdBy       String
  createdAt       DateTime           @default(now())
  completedAt     DateTime?
  collaboration   CollaborationSpace @relation(fields: [collaborationId], references: [id], onDelete: Cascade)

  @@map("action_items")
}

model WorkShowcase {
  id            String        @id @default(cuid())
  eventId       String
  projectName   String
  description   String
  contributors  String?
  skillsUsed    String?
  skillsNeeded  String?
  status        ProjectStatus @default(IDEATION)
  contactEmail  String?
  repositoryUrl String?
  demoUrl       String?
  images        String?
  tags          String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("work_showcases")
}

model UserAchievement {
  id              String          @id @default(cuid())
  userId          String
  achievementType AchievementType
  name            String
  description     String
  icon            String          @default("mdi-trophy")
  badgeUrl        String?
  eventId         String?
  metadata        String?
  earnedAt        DateTime        @default(now())
  user            User            @relation(fields: [userId], references: [id])

  @@unique([userId, achievementType, name, eventId])
  @@map("user_achievements")
}

model IntroductionRequest {
  id              String             @id @default(cuid())
  eventId         String
  requesterId     String
  targetPersonId  String
  reason          String
  commonInterests String?
  status          IntroductionStatus @default(PENDING)
  facilitatedBy   String?
  createdAt       DateTime           @default(now())
  completedAt     DateTime?
  targetPerson    User               @relation("IntroductionTarget", fields: [targetPersonId], references: [id])
  requester       User               @relation("IntroductionRequester", fields: [requesterId], references: [id])

  @@map("introduction_requests")
}

model SkillMatch {
  id                 String    @id @default(cuid())
  eventId            String
  personAId          String
  personBId          String
  matchType          MatchType
  skills             String?
  compatibilityScore Float
  reason             String
  createdAt          DateTime  @default(now())
  personB            User      @relation("SkillMatchPersonB", fields: [personBId], references: [id])
  personA            User      @relation("SkillMatchPersonA", fields: [personAId], references: [id])

  @@unique([eventId, personAId, personBId])
  @@map("skill_matches")
}

// Analytics and Reporting Models
model AnalyticsEvent {
  id          String   @id @default(cuid())
  eventType   String   // PAGE_VIEW, USER_ACTION, EVENT_JOIN, etc.
  userId      String?
  eventId     String?
  sessionId   String?
  properties  String?  // JSON string for event properties
  timestamp   DateTime @default(now())
  ipAddress   String?
  userAgent   String?

  @@map("analytics_events")
}

model EventAnalytics {
  id                    String   @id @default(cuid())
  eventId               String   @unique
  totalParticipants     Int      @default(0)
  totalConnections      Int      @default(0)
  totalCollaborations   Int      @default(0)
  avgConnectionQuality  Float    @default(0)
  participantRetention  Float    @default(0)
  engagementScore       Float    @default(0)
  successScore          Float    @default(0)
  calculatedAt          DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("event_analytics")
}

model UserEngagement {
  id               String   @id @default(cuid())
  userId           String
  eventId          String?
  pageViews        Int      @default(0)
  timeOnPlatform   Int      @default(0) // in minutes
  actionsCount     Int      @default(0)
  connectionsMade  Int      @default(0)
  followUpsCompleted Int    @default(0)
  engagementScore  Float    @default(0)
  date             DateTime @default(now())

  @@unique([userId, eventId, date])
  @@map("user_engagement")
}

model AnalyticsReport {
  id          String   @id @default(cuid())
  name        String
  description String?
  reportType  String   // SUBSCRIPTION, EVENT, USER_ENGAGEMENT, etc.
  filters     String?  // JSON string for report filters
  data        String   // JSON string for report data
  generatedBy String
  createdAt   DateTime @default(now())

  @@map("analytics_reports")
}
